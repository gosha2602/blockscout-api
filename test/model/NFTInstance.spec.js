/*
 * BlockScout API
 * API for BlockScout web app
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlockScoutApi);
  }
}(this, function(expect, BlockScoutApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('NFTInstance', function() {
      beforeEach(function() {
        instance = new BlockScoutApi.NFTInstance();
      });

      it('should create an instance of NFTInstance', function() {
        // TODO: update the code to test NFTInstance
        expect(instance).to.be.a(BlockScoutApi.NFTInstance);
      });

      it('should have the property isUnique (base name: "is_unique")', function() {
        // TODO: update the code to test the property isUnique
        expect(instance).to.have.property('isUnique');
        // expect(instance.isUnique).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property holderAddressHash (base name: "holder_address_hash")', function() {
        // TODO: update the code to test the property holderAddressHash
        expect(instance).to.have.property('holderAddressHash');
        // expect(instance.holderAddressHash).to.be(expectedValueLiteral);
      });

      it('should have the property imageUrl (base name: "image_url")', function() {
        // TODO: update the code to test the property imageUrl
        expect(instance).to.have.property('imageUrl');
        // expect(instance.imageUrl).to.be(expectedValueLiteral);
      });

      it('should have the property animationUrl (base name: "animation_url")', function() {
        // TODO: update the code to test the property animationUrl
        expect(instance).to.have.property('animationUrl');
        // expect(instance.animationUrl).to.be(expectedValueLiteral);
      });

      it('should have the property externalAppUrl (base name: "external_app_url")', function() {
        // TODO: update the code to test the property externalAppUrl
        expect(instance).to.have.property('externalAppUrl');
        // expect(instance.externalAppUrl).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property owner (base name: "owner")', function() {
        // TODO: update the code to test the property owner
        expect(instance).to.have.property('owner');
        // expect(instance.owner).to.be(expectedValueLiteral);
      });

      it('should have the property token (base name: "token")', function() {
        // TODO: update the code to test the property token
        expect(instance).to.have.property('token');
        // expect(instance.token).to.be(expectedValueLiteral);
      });

    });
  });

}));
