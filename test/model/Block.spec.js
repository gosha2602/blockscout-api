/*
 * BlockScout API
 * API for BlockScout web app
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlockScoutApi);
  }
}(this, function(expect, BlockScoutApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Block', function() {
      beforeEach(function() {
        instance = new BlockScoutApi.Block();
      });

      it('should create an instance of Block', function() {
        // TODO: update the code to test Block
        expect(instance).to.be.a(BlockScoutApi.Block);
      });

      it('should have the property baseFeePerGas (base name: "base_fee_per_gas")', function() {
        // TODO: update the code to test the property baseFeePerGas
        expect(instance).to.have.property('baseFeePerGas');
        // expect(instance.baseFeePerGas).to.be(expectedValueLiteral);
      });

      it('should have the property burntFees (base name: "burnt_fees")', function() {
        // TODO: update the code to test the property burntFees
        expect(instance).to.have.property('burntFees');
        // expect(instance.burntFees).to.be(expectedValueLiteral);
      });

      it('should have the property burntFeesPercentage (base name: "burnt_fees_percentage")', function() {
        // TODO: update the code to test the property burntFeesPercentage
        expect(instance).to.have.property('burntFeesPercentage');
        // expect(instance.burntFeesPercentage).to.be(expectedValueLiteral);
      });

      it('should have the property difficulty (base name: "difficulty")', function() {
        // TODO: update the code to test the property difficulty
        expect(instance).to.have.property('difficulty');
        // expect(instance.difficulty).to.be(expectedValueLiteral);
      });

      it('should have the property extraData (base name: "extra_data")', function() {
        // TODO: update the code to test the property extraData
        expect(instance).to.have.property('extraData');
        // expect(instance.extraData).to.be(expectedValueLiteral);
      });

      it('should have the property gasLimit (base name: "gas_limit")', function() {
        // TODO: update the code to test the property gasLimit
        expect(instance).to.have.property('gasLimit');
        // expect(instance.gasLimit).to.be(expectedValueLiteral);
      });

      it('should have the property gasTargetPercentage (base name: "gas_target_percentage")', function() {
        // TODO: update the code to test the property gasTargetPercentage
        expect(instance).to.have.property('gasTargetPercentage');
        // expect(instance.gasTargetPercentage).to.be(expectedValueLiteral);
      });

      it('should have the property gasUsed (base name: "gas_used")', function() {
        // TODO: update the code to test the property gasUsed
        expect(instance).to.have.property('gasUsed');
        // expect(instance.gasUsed).to.be(expectedValueLiteral);
      });

      it('should have the property gasUsedPercentage (base name: "gas_used_percentage")', function() {
        // TODO: update the code to test the property gasUsedPercentage
        expect(instance).to.have.property('gasUsedPercentage');
        // expect(instance.gasUsedPercentage).to.be(expectedValueLiteral);
      });

      it('should have the property hash (base name: "hash")', function() {
        // TODO: update the code to test the property hash
        expect(instance).to.have.property('hash');
        // expect(instance.hash).to.be(expectedValueLiteral);
      });

      it('should have the property height (base name: "height")', function() {
        // TODO: update the code to test the property height
        expect(instance).to.have.property('height');
        // expect(instance.height).to.be(expectedValueLiteral);
      });

      it('should have the property miner (base name: "miner")', function() {
        // TODO: update the code to test the property miner
        expect(instance).to.have.property('miner');
        // expect(instance.miner).to.be(expectedValueLiteral);
      });

      it('should have the property nonce (base name: "nonce")', function() {
        // TODO: update the code to test the property nonce
        expect(instance).to.have.property('nonce');
        // expect(instance.nonce).to.be(expectedValueLiteral);
      });

      it('should have the property parentHash (base name: "parent_hash")', function() {
        // TODO: update the code to test the property parentHash
        expect(instance).to.have.property('parentHash');
        // expect(instance.parentHash).to.be(expectedValueLiteral);
      });

      it('should have the property priorityFee (base name: "priority_fee")', function() {
        // TODO: update the code to test the property priorityFee
        expect(instance).to.have.property('priorityFee');
        // expect(instance.priorityFee).to.be(expectedValueLiteral);
      });

      it('should have the property rewards (base name: "rewards")', function() {
        // TODO: update the code to test the property rewards
        expect(instance).to.have.property('rewards');
        // expect(instance.rewards).to.be(expectedValueLiteral);
      });

      it('should have the property size (base name: "size")', function() {
        // TODO: update the code to test the property size
        expect(instance).to.have.property('size');
        // expect(instance.size).to.be(expectedValueLiteral);
      });

      it('should have the property stateRoot (base name: "state_root")', function() {
        // TODO: update the code to test the property stateRoot
        expect(instance).to.have.property('stateRoot');
        // expect(instance.stateRoot).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

      it('should have the property totalDifficulty (base name: "total_difficulty")', function() {
        // TODO: update the code to test the property totalDifficulty
        expect(instance).to.have.property('totalDifficulty');
        // expect(instance.totalDifficulty).to.be(expectedValueLiteral);
      });

      it('should have the property txCount (base name: "tx_count")', function() {
        // TODO: update the code to test the property txCount
        expect(instance).to.have.property('txCount');
        // expect(instance.txCount).to.be(expectedValueLiteral);
      });

      it('should have the property txFees (base name: "tx_fees")', function() {
        // TODO: update the code to test the property txFees
        expect(instance).to.have.property('txFees');
        // expect(instance.txFees).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property unclesHashes (base name: "uncles_hashes")', function() {
        // TODO: update the code to test the property unclesHashes
        expect(instance).to.have.property('unclesHashes');
        // expect(instance.unclesHashes).to.be(expectedValueLiteral);
      });

      it('should have the property withdrawalsCount (base name: "withdrawals_count")', function() {
        // TODO: update the code to test the property withdrawalsCount
        expect(instance).to.have.property('withdrawalsCount');
        // expect(instance.withdrawalsCount).to.be(expectedValueLiteral);
      });

    });
  });

}));
