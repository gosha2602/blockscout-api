/*
 * BlockScout API
 * API for BlockScout web app
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlockScoutApi);
  }
}(this, function(expect, BlockScoutApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Transaction', function() {
      beforeEach(function() {
        instance = new BlockScoutApi.Transaction();
      });

      it('should create an instance of Transaction', function() {
        // TODO: update the code to test Transaction
        expect(instance).to.be.a(BlockScoutApi.Transaction);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

      it('should have the property fee (base name: "fee")', function() {
        // TODO: update the code to test the property fee
        expect(instance).to.have.property('fee');
        // expect(instance.fee).to.be(expectedValueLiteral);
      });

      it('should have the property gasLimit (base name: "gas_limit")', function() {
        // TODO: update the code to test the property gasLimit
        expect(instance).to.have.property('gasLimit');
        // expect(instance.gasLimit).to.be(expectedValueLiteral);
      });

      it('should have the property block (base name: "block")', function() {
        // TODO: update the code to test the property block
        expect(instance).to.have.property('block');
        // expect(instance.block).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property method (base name: "method")', function() {
        // TODO: update the code to test the property method
        expect(instance).to.have.property('method');
        // expect(instance.method).to.be(expectedValueLiteral);
      });

      it('should have the property confirmations (base name: "confirmations")', function() {
        // TODO: update the code to test the property confirmations
        expect(instance).to.have.property('confirmations');
        // expect(instance.confirmations).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeRate (base name: "exchange_rate")', function() {
        // TODO: update the code to test the property exchangeRate
        expect(instance).to.have.property('exchangeRate');
        // expect(instance.exchangeRate).to.be(expectedValueLiteral);
      });

      it('should have the property to (base name: "to")', function() {
        // TODO: update the code to test the property to
        expect(instance).to.have.property('to');
        // expect(instance.to).to.be(expectedValueLiteral);
      });

      it('should have the property txBurntFee (base name: "tx_burnt_fee")', function() {
        // TODO: update the code to test the property txBurntFee
        expect(instance).to.have.property('txBurntFee');
        // expect(instance.txBurntFee).to.be(expectedValueLiteral);
      });

      it('should have the property maxFeePerGas (base name: "max_fee_per_gas")', function() {
        // TODO: update the code to test the property maxFeePerGas
        expect(instance).to.have.property('maxFeePerGas');
        // expect(instance.maxFeePerGas).to.be(expectedValueLiteral);
      });

      it('should have the property result (base name: "result")', function() {
        // TODO: update the code to test the property result
        expect(instance).to.have.property('result');
        // expect(instance.result).to.be(expectedValueLiteral);
      });

      it('should have the property hash (base name: "hash")', function() {
        // TODO: update the code to test the property hash
        expect(instance).to.have.property('hash');
        // expect(instance.hash).to.be(expectedValueLiteral);
      });

      it('should have the property gasPrice (base name: "gas_price")', function() {
        // TODO: update the code to test the property gasPrice
        expect(instance).to.have.property('gasPrice');
        // expect(instance.gasPrice).to.be(expectedValueLiteral);
      });

      it('should have the property priorityFee (base name: "priority_fee")', function() {
        // TODO: update the code to test the property priorityFee
        expect(instance).to.have.property('priorityFee');
        // expect(instance.priorityFee).to.be(expectedValueLiteral);
      });

      it('should have the property baseFeePerGas (base name: "base_fee_per_gas")', function() {
        // TODO: update the code to test the property baseFeePerGas
        expect(instance).to.have.property('baseFeePerGas');
        // expect(instance.baseFeePerGas).to.be(expectedValueLiteral);
      });

      it('should have the property from (base name: "from")', function() {
        // TODO: update the code to test the property from
        expect(instance).to.have.property('from');
        // expect(instance.from).to.be(expectedValueLiteral);
      });

      it('should have the property tokenTransfers (base name: "token_transfers")', function() {
        // TODO: update the code to test the property tokenTransfers
        expect(instance).to.have.property('tokenTransfers');
        // expect(instance.tokenTransfers).to.be(expectedValueLiteral);
      });

      it('should have the property txTypes (base name: "tx_types")', function() {
        // TODO: update the code to test the property txTypes
        expect(instance).to.have.property('txTypes');
        // expect(instance.txTypes).to.be(expectedValueLiteral);
      });

      it('should have the property gasUsed (base name: "gas_used")', function() {
        // TODO: update the code to test the property gasUsed
        expect(instance).to.have.property('gasUsed');
        // expect(instance.gasUsed).to.be(expectedValueLiteral);
      });

      it('should have the property createdContract (base name: "created_contract")', function() {
        // TODO: update the code to test the property createdContract
        expect(instance).to.have.property('createdContract');
        // expect(instance.createdContract).to.be(expectedValueLiteral);
      });

      it('should have the property position (base name: "position")', function() {
        // TODO: update the code to test the property position
        expect(instance).to.have.property('position');
        // expect(instance.position).to.be(expectedValueLiteral);
      });

      it('should have the property nonce (base name: "nonce")', function() {
        // TODO: update the code to test the property nonce
        expect(instance).to.have.property('nonce');
        // expect(instance.nonce).to.be(expectedValueLiteral);
      });

      it('should have the property hasErrorInInternalTxs (base name: "has_error_in_internal_txs")', function() {
        // TODO: update the code to test the property hasErrorInInternalTxs
        expect(instance).to.have.property('hasErrorInInternalTxs');
        // expect(instance.hasErrorInInternalTxs).to.be(expectedValueLiteral);
      });

      it('should have the property actions (base name: "actions")', function() {
        // TODO: update the code to test the property actions
        expect(instance).to.have.property('actions');
        // expect(instance.actions).to.be(expectedValueLiteral);
      });

      it('should have the property decodedInput (base name: "decoded_input")', function() {
        // TODO: update the code to test the property decodedInput
        expect(instance).to.have.property('decodedInput');
        // expect(instance.decodedInput).to.be(expectedValueLiteral);
      });

      it('should have the property tokenTransfersOverflow (base name: "token_transfers_overflow")', function() {
        // TODO: update the code to test the property tokenTransfersOverflow
        expect(instance).to.have.property('tokenTransfersOverflow');
        // expect(instance.tokenTransfersOverflow).to.be(expectedValueLiteral);
      });

      it('should have the property rawInput (base name: "raw_input")', function() {
        // TODO: update the code to test the property rawInput
        expect(instance).to.have.property('rawInput');
        // expect(instance.rawInput).to.be(expectedValueLiteral);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

      it('should have the property maxPriorityFeePerGas (base name: "max_priority_fee_per_gas")', function() {
        // TODO: update the code to test the property maxPriorityFeePerGas
        expect(instance).to.have.property('maxPriorityFeePerGas');
        // expect(instance.maxPriorityFeePerGas).to.be(expectedValueLiteral);
      });

      it('should have the property revertReason (base name: "revert_reason")', function() {
        // TODO: update the code to test the property revertReason
        expect(instance).to.have.property('revertReason');
        // expect(instance.revertReason).to.be(expectedValueLiteral);
      });

      it('should have the property confirmationDuration (base name: "confirmation_duration")', function() {
        // TODO: update the code to test the property confirmationDuration
        expect(instance).to.have.property('confirmationDuration');
        // expect(instance.confirmationDuration).to.be(expectedValueLiteral);
      });

      it('should have the property txTag (base name: "tx_tag")', function() {
        // TODO: update the code to test the property txTag
        expect(instance).to.have.property('txTag');
        // expect(instance.txTag).to.be(expectedValueLiteral);
      });

    });
  });

}));
