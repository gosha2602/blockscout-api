/*
 * BlockScout API
 * API for BlockScout web app
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlockScoutApi);
  }
}(this, function(expect, BlockScoutApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Address', function() {
      beforeEach(function() {
        instance = new BlockScoutApi.Address();
      });

      it('should create an instance of Address', function() {
        // TODO: update the code to test Address
        expect(instance).to.be.a(BlockScoutApi.Address);
      });

      it('should have the property creatorAddressHash (base name: "creator_address_hash")', function() {
        // TODO: update the code to test the property creatorAddressHash
        expect(instance).to.have.property('creatorAddressHash');
        // expect(instance.creatorAddressHash).to.be(expectedValueLiteral);
      });

      it('should have the property creationTxHash (base name: "creation_tx_hash")', function() {
        // TODO: update the code to test the property creationTxHash
        expect(instance).to.have.property('creationTxHash');
        // expect(instance.creationTxHash).to.be(expectedValueLiteral);
      });

      it('should have the property token (base name: "token")', function() {
        // TODO: update the code to test the property token
        expect(instance).to.have.property('token');
        // expect(instance.token).to.be(expectedValueLiteral);
      });

      it('should have the property coinBalance (base name: "coin_balance")', function() {
        // TODO: update the code to test the property coinBalance
        expect(instance).to.have.property('coinBalance');
        // expect(instance.coinBalance).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeRate (base name: "exchange_rate")', function() {
        // TODO: update the code to test the property exchangeRate
        expect(instance).to.have.property('exchangeRate');
        // expect(instance.exchangeRate).to.be(expectedValueLiteral);
      });

      it('should have the property implementationAddress (base name: "implementation_address")', function() {
        // TODO: update the code to test the property implementationAddress
        expect(instance).to.have.property('implementationAddress');
        // expect(instance.implementationAddress).to.be(expectedValueLiteral);
      });

      it('should have the property blockNumberBalanceUpdatedAt (base name: "block_number_balance_updated_at")', function() {
        // TODO: update the code to test the property blockNumberBalanceUpdatedAt
        expect(instance).to.have.property('blockNumberBalanceUpdatedAt');
        // expect(instance.blockNumberBalanceUpdatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property hash (base name: "hash")', function() {
        // TODO: update the code to test the property hash
        expect(instance).to.have.property('hash');
        // expect(instance.hash).to.be(expectedValueLiteral);
      });

      it('should have the property implementationName (base name: "implementation_name")', function() {
        // TODO: update the code to test the property implementationName
        expect(instance).to.have.property('implementationName');
        // expect(instance.implementationName).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property isContract (base name: "is_contract")', function() {
        // TODO: update the code to test the property isContract
        expect(instance).to.have.property('isContract');
        // expect(instance.isContract).to.be(expectedValueLiteral);
      });

      it('should have the property privateTags (base name: "private_tags")', function() {
        // TODO: update the code to test the property privateTags
        expect(instance).to.have.property('privateTags');
        // expect(instance.privateTags).to.be(expectedValueLiteral);
      });

      it('should have the property watchlistNames (base name: "watchlist_names")', function() {
        // TODO: update the code to test the property watchlistNames
        expect(instance).to.have.property('watchlistNames');
        // expect(instance.watchlistNames).to.be(expectedValueLiteral);
      });

      it('should have the property publicTags (base name: "public_tags")', function() {
        // TODO: update the code to test the property publicTags
        expect(instance).to.have.property('publicTags');
        // expect(instance.publicTags).to.be(expectedValueLiteral);
      });

      it('should have the property isVerified (base name: "is_verified")', function() {
        // TODO: update the code to test the property isVerified
        expect(instance).to.have.property('isVerified');
        // expect(instance.isVerified).to.be(expectedValueLiteral);
      });

      it('should have the property hasBeaconChainWithdrawals (base name: "has_beacon_chain_withdrawals")', function() {
        // TODO: update the code to test the property hasBeaconChainWithdrawals
        expect(instance).to.have.property('hasBeaconChainWithdrawals');
        // expect(instance.hasBeaconChainWithdrawals).to.be(expectedValueLiteral);
      });

      it('should have the property hasCustomMethodsRead (base name: "has_custom_methods_read")', function() {
        // TODO: update the code to test the property hasCustomMethodsRead
        expect(instance).to.have.property('hasCustomMethodsRead');
        // expect(instance.hasCustomMethodsRead).to.be(expectedValueLiteral);
      });

      it('should have the property hasCustomMethodsWrite (base name: "has_custom_methods_write")', function() {
        // TODO: update the code to test the property hasCustomMethodsWrite
        expect(instance).to.have.property('hasCustomMethodsWrite');
        // expect(instance.hasCustomMethodsWrite).to.be(expectedValueLiteral);
      });

      it('should have the property hasDecompiledCode (base name: "has_decompiled_code")', function() {
        // TODO: update the code to test the property hasDecompiledCode
        expect(instance).to.have.property('hasDecompiledCode');
        // expect(instance.hasDecompiledCode).to.be(expectedValueLiteral);
      });

      it('should have the property hasLogs (base name: "has_logs")', function() {
        // TODO: update the code to test the property hasLogs
        expect(instance).to.have.property('hasLogs');
        // expect(instance.hasLogs).to.be(expectedValueLiteral);
      });

      it('should have the property hasMethodsRead (base name: "has_methods_read")', function() {
        // TODO: update the code to test the property hasMethodsRead
        expect(instance).to.have.property('hasMethodsRead');
        // expect(instance.hasMethodsRead).to.be(expectedValueLiteral);
      });

      it('should have the property hasMethodsWrite (base name: "has_methods_write")', function() {
        // TODO: update the code to test the property hasMethodsWrite
        expect(instance).to.have.property('hasMethodsWrite');
        // expect(instance.hasMethodsWrite).to.be(expectedValueLiteral);
      });

      it('should have the property hasMethodsReadProxy (base name: "has_methods_read_proxy")', function() {
        // TODO: update the code to test the property hasMethodsReadProxy
        expect(instance).to.have.property('hasMethodsReadProxy');
        // expect(instance.hasMethodsReadProxy).to.be(expectedValueLiteral);
      });

      it('should have the property hasMethodsWriteProxy (base name: "has_methods_write_proxy")', function() {
        // TODO: update the code to test the property hasMethodsWriteProxy
        expect(instance).to.have.property('hasMethodsWriteProxy');
        // expect(instance.hasMethodsWriteProxy).to.be(expectedValueLiteral);
      });

      it('should have the property hasTokenTransfers (base name: "has_token_transfers")', function() {
        // TODO: update the code to test the property hasTokenTransfers
        expect(instance).to.have.property('hasTokenTransfers');
        // expect(instance.hasTokenTransfers).to.be(expectedValueLiteral);
      });

      it('should have the property hasTokens (base name: "has_tokens")', function() {
        // TODO: update the code to test the property hasTokens
        expect(instance).to.have.property('hasTokens');
        // expect(instance.hasTokens).to.be(expectedValueLiteral);
      });

      it('should have the property hasValidatedBlocks (base name: "has_validated_blocks")', function() {
        // TODO: update the code to test the property hasValidatedBlocks
        expect(instance).to.have.property('hasValidatedBlocks');
        // expect(instance.hasValidatedBlocks).to.be(expectedValueLiteral);
      });

    });
  });

}));
