/*
 * BlockScout API
 * API for BlockScout web app
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlockScoutApi);
  }
}(this, function(expect, BlockScoutApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Log', function() {
      beforeEach(function() {
        instance = new BlockScoutApi.Log();
      });

      it('should create an instance of Log', function() {
        // TODO: update the code to test Log
        expect(instance).to.be.a(BlockScoutApi.Log);
      });

      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property blockHash (base name: "block_hash")', function() {
        // TODO: update the code to test the property blockHash
        expect(instance).to.have.property('blockHash');
        // expect(instance.blockHash).to.be(expectedValueLiteral);
      });

      it('should have the property blockNumber (base name: "block_number")', function() {
        // TODO: update the code to test the property blockNumber
        expect(instance).to.have.property('blockNumber');
        // expect(instance.blockNumber).to.be(expectedValueLiteral);
      });

      it('should have the property data (base name: "data")', function() {
        // TODO: update the code to test the property data
        expect(instance).to.have.property('data');
        // expect(instance.data).to.be(expectedValueLiteral);
      });

      it('should have the property decoded (base name: "decoded")', function() {
        // TODO: update the code to test the property decoded
        expect(instance).to.have.property('decoded');
        // expect(instance.decoded).to.be(expectedValueLiteral);
      });

      it('should have the property index (base name: "index")', function() {
        // TODO: update the code to test the property index
        expect(instance).to.have.property('index');
        // expect(instance.index).to.be(expectedValueLiteral);
      });

      it('should have the property smartContract (base name: "smart_contract")', function() {
        // TODO: update the code to test the property smartContract
        expect(instance).to.have.property('smartContract');
        // expect(instance.smartContract).to.be(expectedValueLiteral);
      });

      it('should have the property topics (base name: "topics")', function() {
        // TODO: update the code to test the property topics
        expect(instance).to.have.property('topics');
        // expect(instance.topics).to.be(expectedValueLiteral);
      });

      it('should have the property txHash (base name: "tx_hash")', function() {
        // TODO: update the code to test the property txHash
        expect(instance).to.have.property('txHash');
        // expect(instance.txHash).to.be(expectedValueLiteral);
      });

    });
  });

}));
