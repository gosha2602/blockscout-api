/*
 * BlockScout API
 * API for BlockScout web app
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlockScoutApi);
  }
}(this, function(expect, BlockScoutApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AddressParam', function() {
      beforeEach(function() {
        instance = new BlockScoutApi.AddressParam();
      });

      it('should create an instance of AddressParam', function() {
        // TODO: update the code to test AddressParam
        expect(instance).to.be.a(BlockScoutApi.AddressParam);
      });

      it('should have the property hash (base name: "hash")', function() {
        // TODO: update the code to test the property hash
        expect(instance).to.have.property('hash');
        // expect(instance.hash).to.be(expectedValueLiteral);
      });

      it('should have the property implementationName (base name: "implementation_name")', function() {
        // TODO: update the code to test the property implementationName
        expect(instance).to.have.property('implementationName');
        // expect(instance.implementationName).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property isContract (base name: "is_contract")', function() {
        // TODO: update the code to test the property isContract
        expect(instance).to.have.property('isContract');
        // expect(instance.isContract).to.be(expectedValueLiteral);
      });

      it('should have the property privateTags (base name: "private_tags")', function() {
        // TODO: update the code to test the property privateTags
        expect(instance).to.have.property('privateTags');
        // expect(instance.privateTags).to.be(expectedValueLiteral);
      });

      it('should have the property watchlistNames (base name: "watchlist_names")', function() {
        // TODO: update the code to test the property watchlistNames
        expect(instance).to.have.property('watchlistNames');
        // expect(instance.watchlistNames).to.be(expectedValueLiteral);
      });

      it('should have the property publicTags (base name: "public_tags")', function() {
        // TODO: update the code to test the property publicTags
        expect(instance).to.have.property('publicTags');
        // expect(instance.publicTags).to.be(expectedValueLiteral);
      });

      it('should have the property isVerified (base name: "is_verified")', function() {
        // TODO: update the code to test the property isVerified
        expect(instance).to.have.property('isVerified');
        // expect(instance.isVerified).to.be(expectedValueLiteral);
      });

    });
  });

}));
