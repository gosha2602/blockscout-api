/*
 * BlockScout API
 * API for BlockScout web app
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlockScoutApi);
  }
}(this, function(expect, BlockScoutApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BlockScoutApi.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('getAddress', function() {
        it('should call getAddress successfully', function(done) {
          // TODO: uncomment, update parameter values for getAddress call and complete the assertions
          /*

          instance.getAddress(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.Address);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAddressBlocksValidated', function() {
        it('should call getAddressBlocksValidated successfully', function(done) {
          // TODO: uncomment, update parameter values for getAddressBlocksValidated call and complete the assertions
          /*

          instance.getAddressBlocksValidated(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20015);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAddressCoinBalanceHistory', function() {
        it('should call getAddressCoinBalanceHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getAddressCoinBalanceHistory call and complete the assertions
          /*

          instance.getAddressCoinBalanceHistory(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20017);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAddressCoinBalanceHistoryByDay', function() {
        it('should call getAddressCoinBalanceHistoryByDay successfully', function(done) {
          // TODO: uncomment, update parameter values for getAddressCoinBalanceHistoryByDay call and complete the assertions
          /*

          instance.getAddressCoinBalanceHistoryByDay(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BlockScoutApi.CoinBalanceHistoryByDaysEntry);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAddressCounters', function() {
        it('should call getAddressCounters successfully', function(done) {
          // TODO: uncomment, update parameter values for getAddressCounters call and complete the assertions
          /*

          instance.getAddressCounters(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.AddressCounters);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAddressInternalTxs', function() {
        it('should call getAddressInternalTxs successfully', function(done) {
          // TODO: uncomment, update parameter values for getAddressInternalTxs call and complete the assertions
          /*
          var opts = {};

          instance.getAddressInternalTxs(addressHash, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20013);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAddressLogs', function() {
        it('should call getAddressLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getAddressLogs call and complete the assertions
          /*

          instance.getAddressLogs(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20014);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAddressTokenBalances', function() {
        it('should call getAddressTokenBalances successfully', function(done) {
          // TODO: uncomment, update parameter values for getAddressTokenBalances call and complete the assertions
          /*

          instance.getAddressTokenBalances(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BlockScoutApi.TokenBalance);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAddressTokenTransfers', function() {
        it('should call getAddressTokenTransfers successfully', function(done) {
          // TODO: uncomment, update parameter values for getAddressTokenTransfers call and complete the assertions
          /*
          var opts = {};

          instance.getAddressTokenTransfers(addressHash, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20012);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAddressTokens', function() {
        it('should call getAddressTokens successfully', function(done) {
          // TODO: uncomment, update parameter values for getAddressTokens call and complete the assertions
          /*
          var opts = {};

          instance.getAddressTokens(addressHash, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20016);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAddressTxs', function() {
        it('should call getAddressTxs successfully', function(done) {
          // TODO: uncomment, update parameter values for getAddressTxs call and complete the assertions
          /*
          var opts = {};

          instance.getAddressTxs(addressHash, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse2009);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAddressWithdrawals', function() {
        it('should call getAddressWithdrawals successfully', function(done) {
          // TODO: uncomment, update parameter values for getAddressWithdrawals call and complete the assertions
          /*

          instance.getAddressWithdrawals(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20010);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAddresses', function() {
        it('should call getAddresses successfully', function(done) {
          // TODO: uncomment getAddresses call and complete the assertions
          /*

          instance.getAddresses(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20011);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBlock', function() {
        it('should call getBlock successfully', function(done) {
          // TODO: uncomment, update parameter values for getBlock call and complete the assertions
          /*

          instance.getBlock(blockNumberOrHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.Block);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBlockTxs', function() {
        it('should call getBlockTxs successfully', function(done) {
          // TODO: uncomment, update parameter values for getBlockTxs call and complete the assertions
          /*

          instance.getBlockTxs(blockNumberOrHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse2009);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBlockWithdrawals', function() {
        it('should call getBlockWithdrawals successfully', function(done) {
          // TODO: uncomment, update parameter values for getBlockWithdrawals call and complete the assertions
          /*

          instance.getBlockWithdrawals(blockNumberOrHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20010);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBlocks', function() {
        it('should call getBlocks successfully', function(done) {
          // TODO: uncomment, update parameter values for getBlocks call and complete the assertions
          /*
          var opts = {};

          instance.getBlocks(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getIndexingStatus', function() {
        it('should call getIndexingStatus successfully', function(done) {
          // TODO: uncomment getIndexingStatus call and complete the assertions
          /*

          instance.getIndexingStatus(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.IndexingStatus);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInternalTxs', function() {
        it('should call getInternalTxs successfully', function(done) {
          // TODO: uncomment, update parameter values for getInternalTxs call and complete the assertions
          /*

          instance.getInternalTxs(transactionHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse2006);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getJsonRpcUrl', function() {
        it('should call getJsonRpcUrl successfully', function(done) {
          // TODO: uncomment getJsonRpcUrl call and complete the assertions
          /*

          instance.getJsonRpcUrl(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20027);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLogs', function() {
        it('should call getLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getLogs call and complete the assertions
          /*

          instance.getLogs(transactionHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse2007);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMainPageTokens', function() {
        it('should call getMainPageTokens successfully', function(done) {
          // TODO: uncomment getMainPageTokens call and complete the assertions
          /*

          instance.getMainPageTokens(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BlockScoutApi.Block);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMainPageTxs', function() {
        it('should call getMainPageTxs successfully', function(done) {
          // TODO: uncomment getMainPageTxs call and complete the assertions
          /*

          instance.getMainPageTxs(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BlockScoutApi.Transaction);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketChart', function() {
        it('should call getMarketChart successfully', function(done) {
          // TODO: uncomment getMarketChart call and complete the assertions
          /*

          instance.getMarketChart(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse2004);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNftInstance', function() {
        it('should call getNftInstance successfully', function(done) {
          // TODO: uncomment, update parameter values for getNftInstance call and complete the assertions
          /*

          instance.getNftInstance(addressHash, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.NFTInstance);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNftInstanceTransfers', function() {
        it('should call getNftInstanceTransfers successfully', function(done) {
          // TODO: uncomment, update parameter values for getNftInstanceTransfers call and complete the assertions
          /*

          instance.getNftInstanceTransfers(addressHash, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20022);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNftInstanceTransfersCount', function() {
        it('should call getNftInstanceTransfersCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getNftInstanceTransfersCount call and complete the assertions
          /*

          instance.getNftInstanceTransfersCount(addressHash, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20024);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNftInstances', function() {
        it('should call getNftInstances successfully', function(done) {
          // TODO: uncomment, update parameter values for getNftInstances call and complete the assertions
          /*

          instance.getNftInstances(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20021);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRawTrace', function() {
        it('should call getRawTrace successfully', function(done) {
          // TODO: uncomment, update parameter values for getRawTrace call and complete the assertions
          /*

          instance.getRawTrace(transactionHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BlockScoutApi.RawTrace);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReadMethods', function() {
        it('should call getReadMethods successfully', function(done) {
          // TODO: uncomment, update parameter values for getReadMethods call and complete the assertions
          /*
          var opts = {};

          instance.getReadMethods(addressHash, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReadMethodsProxy', function() {
        it('should call getReadMethodsProxy successfully', function(done) {
          // TODO: uncomment, update parameter values for getReadMethodsProxy call and complete the assertions
          /*
          var opts = {};

          instance.getReadMethodsProxy(addressHash, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSmartContract', function() {
        it('should call getSmartContract successfully', function(done) {
          // TODO: uncomment, update parameter values for getSmartContract call and complete the assertions
          /*

          instance.getSmartContract(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.SmartContract);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSmartContracts', function() {
        it('should call getSmartContracts successfully', function(done) {
          // TODO: uncomment, update parameter values for getSmartContracts call and complete the assertions
          /*
          var opts = {};

          instance.getSmartContracts(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20025);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSmartContractsCounters', function() {
        it('should call getSmartContractsCounters successfully', function(done) {
          // TODO: uncomment getSmartContractsCounters call and complete the assertions
          /*

          instance.getSmartContractsCounters(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20026);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStateChanges', function() {
        it('should call getStateChanges successfully', function(done) {
          // TODO: uncomment, update parameter values for getStateChanges call and complete the assertions
          /*

          instance.getStateChanges(transactionHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse2008);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStats', function() {
        it('should call getStats successfully', function(done) {
          // TODO: uncomment getStats call and complete the assertions
          /*

          instance.getStats(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.StatsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getToken', function() {
        it('should call getToken successfully', function(done) {
          // TODO: uncomment, update parameter values for getToken call and complete the assertions
          /*

          instance.getToken(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.TokenInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTokenCounters', function() {
        it('should call getTokenCounters successfully', function(done) {
          // TODO: uncomment, update parameter values for getTokenCounters call and complete the assertions
          /*

          instance.getTokenCounters(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.TokenCounters);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTokenHolders', function() {
        it('should call getTokenHolders successfully', function(done) {
          // TODO: uncomment, update parameter values for getTokenHolders call and complete the assertions
          /*

          instance.getTokenHolders(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20020);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTokenInstanceHolders', function() {
        it('should call getTokenInstanceHolders successfully', function(done) {
          // TODO: uncomment, update parameter values for getTokenInstanceHolders call and complete the assertions
          /*

          instance.getTokenInstanceHolders(addressHash, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20023);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTokenTokenTransfers', function() {
        it('should call getTokenTokenTransfers successfully', function(done) {
          // TODO: uncomment, update parameter values for getTokenTokenTransfers call and complete the assertions
          /*

          instance.getTokenTokenTransfers(addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20019);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTokenTransfers', function() {
        it('should call getTokenTransfers successfully', function(done) {
          // TODO: uncomment, update parameter values for getTokenTransfers call and complete the assertions
          /*
          var opts = {};

          instance.getTokenTransfers(transactionHash, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse2005);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTokensList', function() {
        it('should call getTokensList successfully', function(done) {
          // TODO: uncomment, update parameter values for getTokensList call and complete the assertions
          /*
          var opts = {};

          instance.getTokensList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20018);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTx', function() {
        it('should call getTx successfully', function(done) {
          // TODO: uncomment, update parameter values for getTx call and complete the assertions
          /*

          instance.getTx(transactionHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.Transaction);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTxs', function() {
        it('should call getTxs successfully', function(done) {
          // TODO: uncomment, update parameter values for getTxs call and complete the assertions
          /*
          var opts = {};

          instance.getTxs(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse2001);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTxsChart', function() {
        it('should call getTxsChart successfully', function(done) {
          // TODO: uncomment getTxsChart call and complete the assertions
          /*

          instance.getTxsChart(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse2003);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWithdrawals', function() {
        it('should call getWithdrawals successfully', function(done) {
          // TODO: uncomment getWithdrawals call and complete the assertions
          /*

          instance.getWithdrawals(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse20010);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWriteMethods', function() {
        it('should call getWriteMethods successfully', function(done) {
          // TODO: uncomment, update parameter values for getWriteMethods call and complete the assertions
          /*
          var opts = {};

          instance.getWriteMethods(addressHash, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWriteMethodsProxy', function() {
        it('should call getWriteMethodsProxy successfully', function(done) {
          // TODO: uncomment, update parameter values for getWriteMethodsProxy call and complete the assertions
          /*
          var opts = {};

          instance.getWriteMethodsProxy(addressHash, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryReadMethod', function() {
        it('should call queryReadMethod successfully', function(done) {
          // TODO: uncomment, update parameter values for queryReadMethod call and complete the assertions
          /*

          instance.queryReadMethod(body, addressHash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('search', function() {
        it('should call search successfully', function(done) {
          // TODO: uncomment, update parameter values for search call and complete the assertions
          /*
          var opts = {};

          instance.search(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.InlineResponse200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchRedirect', function() {
        it('should call searchRedirect successfully', function(done) {
          // TODO: uncomment, update parameter values for searchRedirect call and complete the assertions
          /*
          var opts = {};

          instance.searchRedirect(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BlockScoutApi.SearchResultRedirect);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
