/*
 * BlockScout API
 * API for BlockScout web app
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Address} from '../model/Address';
import {AddressCounters} from '../model/AddressCounters';
import {Block} from '../model/Block';
import {CoinBalanceHistoryByDaysEntry} from '../model/CoinBalanceHistoryByDaysEntry';
import {IndexingStatus} from '../model/IndexingStatus';
import {InlineResponse200} from '../model/InlineResponse200';
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse20010} from '../model/InlineResponse20010';
import {InlineResponse20011} from '../model/InlineResponse20011';
import {InlineResponse20012} from '../model/InlineResponse20012';
import {InlineResponse20013} from '../model/InlineResponse20013';
import {InlineResponse20014} from '../model/InlineResponse20014';
import {InlineResponse20015} from '../model/InlineResponse20015';
import {InlineResponse20016} from '../model/InlineResponse20016';
import {InlineResponse20017} from '../model/InlineResponse20017';
import {InlineResponse20018} from '../model/InlineResponse20018';
import {InlineResponse20019} from '../model/InlineResponse20019';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse20020} from '../model/InlineResponse20020';
import {InlineResponse20021} from '../model/InlineResponse20021';
import {InlineResponse20022} from '../model/InlineResponse20022';
import {InlineResponse20023} from '../model/InlineResponse20023';
import {InlineResponse20024} from '../model/InlineResponse20024';
import {InlineResponse20025} from '../model/InlineResponse20025';
import {InlineResponse20026} from '../model/InlineResponse20026';
import {InlineResponse20027} from '../model/InlineResponse20027';
import {InlineResponse2003} from '../model/InlineResponse2003';
import {InlineResponse2004} from '../model/InlineResponse2004';
import {InlineResponse2005} from '../model/InlineResponse2005';
import {InlineResponse2006} from '../model/InlineResponse2006';
import {InlineResponse2007} from '../model/InlineResponse2007';
import {InlineResponse2008} from '../model/InlineResponse2008';
import {InlineResponse2009} from '../model/InlineResponse2009';
import {NFTInstance} from '../model/NFTInstance';
import {RawTrace} from '../model/RawTrace';
import {ReadMethodQueryBody} from '../model/ReadMethodQueryBody';
import {SearchResultRedirect} from '../model/SearchResultRedirect';
import {SmartContract} from '../model/SmartContract';
import {StatsResponse} from '../model/StatsResponse';
import {TokenBalance} from '../model/TokenBalance';
import {TokenCounters} from '../model/TokenCounters';
import {TokenInfo} from '../model/TokenInfo';
import {Transaction} from '../model/Transaction';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getAddress operation.
     * @callback moduleapi/DefaultApi~getAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Address{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get address info
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddress(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getAddress");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Address;

      return this.apiClient.callApi(
        '/addresses/{address_hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressBlocksValidated operation.
     * @callback moduleapi/DefaultApi~getAddressBlocksValidatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get blocks validated by address
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getAddressBlocksValidatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressBlocksValidated(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getAddressBlocksValidated");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/addresses/{address_hash}/blocks-validated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressCoinBalanceHistory operation.
     * @callback moduleapi/DefaultApi~getAddressCoinBalanceHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get address coin balance history
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getAddressCoinBalanceHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressCoinBalanceHistory(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getAddressCoinBalanceHistory");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/addresses/{address_hash}/coin-balance-history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressCoinBalanceHistoryByDay operation.
     * @callback moduleapi/DefaultApi~getAddressCoinBalanceHistoryByDayCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CoinBalanceHistoryByDaysEntry>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get address coin balance history by day
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getAddressCoinBalanceHistoryByDayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressCoinBalanceHistoryByDay(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getAddressCoinBalanceHistoryByDay");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CoinBalanceHistoryByDaysEntry];

      return this.apiClient.callApi(
        '/addresses/{address_hash}/coin-balance-history-by-day', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressCounters operation.
     * @callback moduleapi/DefaultApi~getAddressCountersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressCounters{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get address counters
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getAddressCountersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressCounters(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getAddressCounters");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddressCounters;

      return this.apiClient.callApi(
        '/addresses/{address_hash}/counters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressInternalTxs operation.
     * @callback moduleapi/DefaultApi~getAddressInternalTxsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get address internal txs
     * @param {String} addressHash Address hash
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {module:api/DefaultApi~getAddressInternalTxsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressInternalTxs(addressHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getAddressInternalTxs");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/addresses/{address_hash}/internal-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressLogs operation.
     * @callback moduleapi/DefaultApi~getAddressLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get address logs
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getAddressLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressLogs(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getAddressLogs");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/addresses/{address_hash}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressTokenBalances operation.
     * @callback moduleapi/DefaultApi~getAddressTokenBalancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TokenBalance>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get blocks validated by address
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getAddressTokenBalancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressTokenBalances(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getAddressTokenBalances");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TokenBalance];

      return this.apiClient.callApi(
        '/addresses/{address_hash}/token-balances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressTokenTransfers operation.
     * @callback moduleapi/DefaultApi~getAddressTokenTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get address token transfers
     * @param {String} addressHash Address hash
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {String} opts.filter 
     * @param {String} opts.token 
     * @param {module:api/DefaultApi~getAddressTokenTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressTokenTransfers(addressHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getAddressTokenTransfers");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        'type': opts['type'],'filter': opts['filter'],'token': opts['token']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/addresses/{address_hash}/token-transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressTokens operation.
     * @callback moduleapi/DefaultApi~getAddressTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get blocks validated by address
     * @param {String} addressHash Address hash
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {module:api/DefaultApi~getAddressTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressTokens(addressHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getAddressTokens");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/addresses/{address_hash}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressTxs operation.
     * @callback moduleapi/DefaultApi~getAddressTxsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get address txs
     * @param {String} addressHash Address hash
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {module:api/DefaultApi~getAddressTxsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressTxs(addressHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getAddressTxs");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/addresses/{address_hash}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressWithdrawals operation.
     * @callback moduleapi/DefaultApi~getAddressWithdrawalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get address withdrawals
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getAddressWithdrawalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressWithdrawals(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getAddressWithdrawals");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/addresses/{address_hash}/withdrawals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddresses operation.
     * @callback moduleapi/DefaultApi~getAddressesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get native coin holders list
     * @param {module:api/DefaultApi~getAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddresses(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlock operation.
     * @callback moduleapi/DefaultApi~getBlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Block{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get block info
     * @param {String} blockNumberOrHash Block number or hash
     * @param {module:api/DefaultApi~getBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlock(blockNumberOrHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'blockNumberOrHash' is set
      if (blockNumberOrHash === undefined || blockNumberOrHash === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHash' when calling getBlock");
      }

      let pathParams = {
        'block_number_or_hash': blockNumberOrHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Block;

      return this.apiClient.callApi(
        '/blocks/{block_number_or_hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockTxs operation.
     * @callback moduleapi/DefaultApi~getBlockTxsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get block txs
     * @param {String} blockNumberOrHash Block number or hash
     * @param {module:api/DefaultApi~getBlockTxsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockTxs(blockNumberOrHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'blockNumberOrHash' is set
      if (blockNumberOrHash === undefined || blockNumberOrHash === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHash' when calling getBlockTxs");
      }

      let pathParams = {
        'block_number_or_hash': blockNumberOrHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/blocks/{block_number_or_hash}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockWithdrawals operation.
     * @callback moduleapi/DefaultApi~getBlockWithdrawalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get block withdrawals
     * @param {String} blockNumberOrHash Block number or hash
     * @param {module:api/DefaultApi~getBlockWithdrawalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockWithdrawals(blockNumberOrHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'blockNumberOrHash' is set
      if (blockNumberOrHash === undefined || blockNumberOrHash === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHash' when calling getBlockWithdrawals");
      }

      let pathParams = {
        'block_number_or_hash': blockNumberOrHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/blocks/{block_number_or_hash}/withdrawals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlocks operation.
     * @callback moduleapi/DefaultApi~getBlocksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get blocks
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {module:api/DefaultApi~getBlocksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlocks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIndexingStatus operation.
     * @callback moduleapi/DefaultApi~getIndexingStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndexingStatus{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get indexing status
     * @param {module:api/DefaultApi~getIndexingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getIndexingStatus(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IndexingStatus;

      return this.apiClient.callApi(
        '/main-page/indexing-status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInternalTxs operation.
     * @callback moduleapi/DefaultApi~getInternalTxsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get internal txs
     * @param {String} transactionHash Transaction hash
     * @param {module:api/DefaultApi~getInternalTxsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getInternalTxs(transactionHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'transactionHash' is set
      if (transactionHash === undefined || transactionHash === null) {
        throw new Error("Missing the required parameter 'transactionHash' when calling getInternalTxs");
      }

      let pathParams = {
        'transaction_hash': transactionHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/transactions/{transaction_hash}/internal-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getJsonRpcUrl operation.
     * @callback moduleapi/DefaultApi~getJsonRpcUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get json rpc url
     * @param {module:api/DefaultApi~getJsonRpcUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getJsonRpcUrl(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/config/json-rpc-url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLogs operation.
     * @callback moduleapi/DefaultApi~getLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get logs
     * @param {String} transactionHash Transaction hash
     * @param {module:api/DefaultApi~getLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLogs(transactionHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'transactionHash' is set
      if (transactionHash === undefined || transactionHash === null) {
        throw new Error("Missing the required parameter 'transactionHash' when calling getLogs");
      }

      let pathParams = {
        'transaction_hash': transactionHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/transactions/{transaction_hash}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMainPageTokens operation.
     * @callback moduleapi/DefaultApi~getMainPageTokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Block>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get main page blocks
     * @param {module:api/DefaultApi~getMainPageTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMainPageTokens(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Block];

      return this.apiClient.callApi(
        '/main-page/blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMainPageTxs operation.
     * @callback moduleapi/DefaultApi~getMainPageTxsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Transaction>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get main page txs
     * @param {module:api/DefaultApi~getMainPageTxsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMainPageTxs(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Transaction];

      return this.apiClient.callApi(
        '/main-page/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMarketChart operation.
     * @callback moduleapi/DefaultApi~getMarketChartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get market chart
     * @param {module:api/DefaultApi~getMarketChartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMarketChart(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/stats/charts/market', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNftInstance operation.
     * @callback moduleapi/DefaultApi~getNftInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NFTInstance{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get NFT instance by id
     * @param {String} addressHash Address hash
     * @param {Number} id integer id
     * @param {module:api/DefaultApi~getNftInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getNftInstance(addressHash, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getNftInstance");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNftInstance");
      }

      let pathParams = {
        'address_hash': addressHash,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NFTInstance;

      return this.apiClient.callApi(
        '/tokens/{address_hash}/instances/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNftInstanceTransfers operation.
     * @callback moduleapi/DefaultApi~getNftInstanceTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get transfers of NFT instance
     * @param {String} addressHash Address hash
     * @param {Number} id integer id
     * @param {module:api/DefaultApi~getNftInstanceTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getNftInstanceTransfers(addressHash, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getNftInstanceTransfers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNftInstanceTransfers");
      }

      let pathParams = {
        'address_hash': addressHash,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/tokens/{address_hash}/instances/{id}/transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNftInstanceTransfersCount operation.
     * @callback moduleapi/DefaultApi~getNftInstanceTransfersCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20024{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get transfers count of NFT instance
     * @param {String} addressHash Address hash
     * @param {Number} id integer id
     * @param {module:api/DefaultApi~getNftInstanceTransfersCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getNftInstanceTransfersCount(addressHash, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getNftInstanceTransfersCount");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNftInstanceTransfersCount");
      }

      let pathParams = {
        'address_hash': addressHash,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20024;

      return this.apiClient.callApi(
        '/tokens/{address_hash}/instances/{id}/transfers-count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNftInstances operation.
     * @callback moduleapi/DefaultApi~getNftInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get NFT instances
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getNftInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getNftInstances(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getNftInstances");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/tokens/{address_hash}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRawTrace operation.
     * @callback moduleapi/DefaultApi~getRawTraceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RawTrace>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get raw trace
     * @param {String} transactionHash Transaction hash
     * @param {module:api/DefaultApi~getRawTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRawTrace(transactionHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'transactionHash' is set
      if (transactionHash === undefined || transactionHash === null) {
        throw new Error("Missing the required parameter 'transactionHash' when calling getRawTrace");
      }

      let pathParams = {
        'transaction_hash': transactionHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RawTrace];

      return this.apiClient.callApi(
        '/transactions/{transaction_hash}/raw-trace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getReadMethods operation.
     * @callback moduleapi/DefaultApi~getReadMethodsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get read methods
     * @param {String} addressHash Address hash
     * @param {Object} opts Optional parameters
     * @param {String} opts.isCustomAbi 
     * @param {String} opts.from 
     * @param {module:api/DefaultApi~getReadMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getReadMethods(addressHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getReadMethods");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        'is_custom_abi': opts['isCustomAbi'],'from': opts['from']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/smart-contracts/{address_hash}/methods-read', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getReadMethodsProxy operation.
     * @callback moduleapi/DefaultApi~getReadMethodsProxyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get read methods proxy
     * @param {String} addressHash Address hash
     * @param {Object} opts Optional parameters
     * @param {String} opts.isCustomAbi 
     * @param {String} opts.from 
     * @param {module:api/DefaultApi~getReadMethodsProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getReadMethodsProxy(addressHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getReadMethodsProxy");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        'is_custom_abi': opts['isCustomAbi'],'from': opts['from']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/smart-contracts/{address_hash}/methods-read-proxy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSmartContract operation.
     * @callback moduleapi/DefaultApi~getSmartContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartContract{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get smart contract
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getSmartContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSmartContract(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getSmartContract");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartContract;

      return this.apiClient.callApi(
        '/smart-contracts/{address_hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSmartContracts operation.
     * @callback moduleapi/DefaultApi~getSmartContractsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20025{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get verified smart contracts
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 
     * @param {String} opts.filter 
     * @param {module:api/DefaultApi~getSmartContractsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSmartContracts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q'],'filter': opts['filter']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20025;

      return this.apiClient.callApi(
        '/smart-contracts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSmartContractsCounters operation.
     * @callback moduleapi/DefaultApi~getSmartContractsCountersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get verified smart contracts counters
     * @param {module:api/DefaultApi~getSmartContractsCountersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSmartContractsCounters(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20026;

      return this.apiClient.callApi(
        '/smart-contracts/counters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStateChanges operation.
     * @callback moduleapi/DefaultApi~getStateChangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get state changes
     * @param {String} transactionHash Transaction hash
     * @param {module:api/DefaultApi~getStateChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStateChanges(transactionHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'transactionHash' is set
      if (transactionHash === undefined || transactionHash === null) {
        throw new Error("Missing the required parameter 'transactionHash' when calling getStateChanges");
      }

      let pathParams = {
        'transaction_hash': transactionHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/transactions/{transaction_hash}/state-changes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStats operation.
     * @callback moduleapi/DefaultApi~getStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get stats counters
     * @param {module:api/DefaultApi~getStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStats(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StatsResponse;

      return this.apiClient.callApi(
        '/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getToken operation.
     * @callback moduleapi/DefaultApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenInfo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get token info
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getToken(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getToken");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenInfo;

      return this.apiClient.callApi(
        '/tokens/{address_hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTokenCounters operation.
     * @callback moduleapi/DefaultApi~getTokenCountersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenCounters{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get token holders
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getTokenCountersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTokenCounters(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getTokenCounters");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenCounters;

      return this.apiClient.callApi(
        '/tokens/{address_hash}/counters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTokenHolders operation.
     * @callback moduleapi/DefaultApi~getTokenHoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get token holders
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getTokenHoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTokenHolders(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getTokenHolders");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/tokens/{address_hash}/holders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTokenInstanceHolders operation.
     * @callback moduleapi/DefaultApi~getTokenInstanceHoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20023{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get token instance holders
     * @param {String} addressHash Address hash
     * @param {Number} id integer id
     * @param {module:api/DefaultApi~getTokenInstanceHoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTokenInstanceHolders(addressHash, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getTokenInstanceHolders");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTokenInstanceHolders");
      }

      let pathParams = {
        'address_hash': addressHash,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20023;

      return this.apiClient.callApi(
        '/tokens/{address_hash}/instances/{id}/holders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTokenTokenTransfers operation.
     * @callback moduleapi/DefaultApi~getTokenTokenTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20019{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get token token transfers
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~getTokenTokenTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTokenTokenTransfers(addressHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getTokenTokenTransfers");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20019;

      return this.apiClient.callApi(
        '/tokens/{address_hash}/transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTokenTransfers operation.
     * @callback moduleapi/DefaultApi~getTokenTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get token transfers
     * @param {String} transactionHash Transaction hash
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {module:api/DefaultApi~getTokenTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTokenTransfers(transactionHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transactionHash' is set
      if (transactionHash === undefined || transactionHash === null) {
        throw new Error("Missing the required parameter 'transactionHash' when calling getTokenTransfers");
      }

      let pathParams = {
        'transaction_hash': transactionHash
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/transactions/{transaction_hash}/token-transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTokensList operation.
     * @callback moduleapi/DefaultApi~getTokensListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get tokens list
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 
     * @param {String} opts.type 
     * @param {module:api/DefaultApi~getTokensListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTokensList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q'],'type': opts['type']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTx operation.
     * @callback moduleapi/DefaultApi~getTxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get tx info
     * @param {String} transactionHash Transaction hash
     * @param {module:api/DefaultApi~getTxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTx(transactionHash, callback) {
      
      let postBody = null;
      // verify the required parameter 'transactionHash' is set
      if (transactionHash === undefined || transactionHash === null) {
        throw new Error("Missing the required parameter 'transactionHash' when calling getTx");
      }

      let pathParams = {
        'transaction_hash': transactionHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transaction;

      return this.apiClient.callApi(
        '/transactions/{transaction_hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTxs operation.
     * @callback moduleapi/DefaultApi~getTxsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get txs
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {String} opts.type 
     * @param {String} opts.method 
     * @param {module:api/DefaultApi~getTxsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTxs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'filter': opts['filter'],'type': opts['type'],'method': opts['method']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTxsChart operation.
     * @callback moduleapi/DefaultApi~getTxsChartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get txs chart
     * @param {module:api/DefaultApi~getTxsChartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTxsChart(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/stats/charts/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWithdrawals operation.
     * @callback moduleapi/DefaultApi~getWithdrawalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get withdrawals
     * @param {module:api/DefaultApi~getWithdrawalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getWithdrawals(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/withdrawals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWriteMethods operation.
     * @callback moduleapi/DefaultApi~getWriteMethodsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get write methods
     * @param {String} addressHash Address hash
     * @param {Object} opts Optional parameters
     * @param {String} opts.isCustomAbi 
     * @param {module:api/DefaultApi~getWriteMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getWriteMethods(addressHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getWriteMethods");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        'is_custom_abi': opts['isCustomAbi']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/smart-contracts/{address_hash}/methods-write', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWriteMethodsProxy operation.
     * @callback moduleapi/DefaultApi~getWriteMethodsProxyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get write methods proxy
     * @param {String} addressHash Address hash
     * @param {Object} opts Optional parameters
     * @param {String} opts.isCustomAbi 
     * @param {module:api/DefaultApi~getWriteMethodsProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getWriteMethodsProxy(addressHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling getWriteMethodsProxy");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        'is_custom_abi': opts['isCustomAbi']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/smart-contracts/{address_hash}/methods-write-proxy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryReadMethod operation.
     * @callback moduleapi/DefaultApi~queryReadMethodCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * query read method
     * @param {module:model/ReadMethodQueryBody} body 
     * @param {String} addressHash Address hash
     * @param {module:api/DefaultApi~queryReadMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    queryReadMethod(body, addressHash, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling queryReadMethod");
      }
      // verify the required parameter 'addressHash' is set
      if (addressHash === undefined || addressHash === null) {
        throw new Error("Missing the required parameter 'addressHash' when calling queryReadMethod");
      }

      let pathParams = {
        'address_hash': addressHash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/smart-contracts/{address_hash}/query-read-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the search operation.
     * @callback moduleapi/DefaultApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 
     * @param {module:api/DefaultApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    search(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchRedirect operation.
     * @callback moduleapi/DefaultApi~searchRedirectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResultRedirect{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search redirect
     * @param {Object} opts Optional parameters
     * @param {String} opts.q 
     * @param {module:api/DefaultApi~searchRedirectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchRedirect(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResultRedirect;

      return this.apiClient.callApi(
        '/search/check-redirect', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}