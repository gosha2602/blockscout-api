/*
 * BlockScout API
 * API for BlockScout web app
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {AddressParam} from './AddressParam';
import {DecodedInput} from './DecodedInput';
import {Fee} from './Fee';
import {TokenTransfer} from './TokenTransfer';
import {TransactionAction} from './TransactionAction';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 1.0.0
 */
export class Transaction {
  /**
   * Constructs a new <code>Transaction</code>.
   * @alias module:model/Transaction
   * @class
   * @param timestamp {String} 
   * @param fee {module:model/Fee} 
   * @param gasLimit {Number} 
   * @param block {Number} 
   * @param status {String} 
   * @param method {String} 
   * @param confirmations {Number} 
   * @param type {Number} 
   * @param exchangeRate {String} 
   * @param to {module:model/AddressParam} 
   * @param txBurntFee {String} 
   * @param maxFeePerGas {String} 
   * @param result {String} 
   * @param hash {String} 
   * @param gasPrice {String} 
   * @param priorityFee {String} 
   * @param baseFeePerGas {String} 
   * @param from {module:model/AddressParam} 
   * @param tokenTransfers {Array.<module:model/TokenTransfer>} 
   * @param txTypes {Array.<String>} 
   * @param gasUsed {String} 
   * @param createdContract {module:model/AddressParam} 
   * @param position {Number} 
   * @param nonce {Number} 
   * @param hasErrorInInternalTxs {Boolean} 
   * @param actions {Array.<module:model/TransactionAction>} 
   * @param decodedInput {module:model/DecodedInput} 
   * @param tokenTransfersOverflow {Boolean} 
   * @param rawInput {String} 
   * @param value {String} 
   * @param maxPriorityFeePerGas {String} 
   * @param revertReason {String} 
   * @param confirmationDuration {Object} 
   * @param txTag {String} 
   */
  constructor(timestamp, fee, gasLimit, block, status, method, confirmations, type, exchangeRate, to, txBurntFee, maxFeePerGas, result, hash, gasPrice, priorityFee, baseFeePerGas, from, tokenTransfers, txTypes, gasUsed, createdContract, position, nonce, hasErrorInInternalTxs, actions, decodedInput, tokenTransfersOverflow, rawInput, value, maxPriorityFeePerGas, revertReason, confirmationDuration, txTag) {
    this.timestamp = timestamp;
    this.fee = fee;
    this.gasLimit = gasLimit;
    this.block = block;
    this.status = status;
    this.method = method;
    this.confirmations = confirmations;
    this.type = type;
    this.exchangeRate = exchangeRate;
    this.to = to;
    this.txBurntFee = txBurntFee;
    this.maxFeePerGas = maxFeePerGas;
    this.result = result;
    this.hash = hash;
    this.gasPrice = gasPrice;
    this.priorityFee = priorityFee;
    this.baseFeePerGas = baseFeePerGas;
    this.from = from;
    this.tokenTransfers = tokenTransfers;
    this.txTypes = txTypes;
    this.gasUsed = gasUsed;
    this.createdContract = createdContract;
    this.position = position;
    this.nonce = nonce;
    this.hasErrorInInternalTxs = hasErrorInInternalTxs;
    this.actions = actions;
    this.decodedInput = decodedInput;
    this.tokenTransfersOverflow = tokenTransfersOverflow;
    this.rawInput = rawInput;
    this.value = value;
    this.maxPriorityFeePerGas = maxPriorityFeePerGas;
    this.revertReason = revertReason;
    this.confirmationDuration = confirmationDuration;
    this.txTag = txTag;
  }

  /**
   * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Transaction} obj Optional instance to populate.
   * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Transaction();
      if (data.hasOwnProperty('timestamp'))
        obj.timestamp = ApiClient.convertToType(data['timestamp'], 'String');
      if (data.hasOwnProperty('fee'))
        obj.fee = Fee.constructFromObject(data['fee']);
      if (data.hasOwnProperty('gas_limit'))
        obj.gasLimit = ApiClient.convertToType(data['gas_limit'], 'Number');
      if (data.hasOwnProperty('block'))
        obj.block = ApiClient.convertToType(data['block'], 'Number');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('method'))
        obj.method = ApiClient.convertToType(data['method'], 'String');
      if (data.hasOwnProperty('confirmations'))
        obj.confirmations = ApiClient.convertToType(data['confirmations'], 'Number');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'Number');
      if (data.hasOwnProperty('exchange_rate'))
        obj.exchangeRate = ApiClient.convertToType(data['exchange_rate'], 'String');
      if (data.hasOwnProperty('to'))
        obj.to = AddressParam.constructFromObject(data['to']);
      if (data.hasOwnProperty('tx_burnt_fee'))
        obj.txBurntFee = ApiClient.convertToType(data['tx_burnt_fee'], 'String');
      if (data.hasOwnProperty('max_fee_per_gas'))
        obj.maxFeePerGas = ApiClient.convertToType(data['max_fee_per_gas'], 'String');
      if (data.hasOwnProperty('result'))
        obj.result = ApiClient.convertToType(data['result'], 'String');
      if (data.hasOwnProperty('hash'))
        obj.hash = ApiClient.convertToType(data['hash'], 'String');
      if (data.hasOwnProperty('gas_price'))
        obj.gasPrice = ApiClient.convertToType(data['gas_price'], 'String');
      if (data.hasOwnProperty('priority_fee'))
        obj.priorityFee = ApiClient.convertToType(data['priority_fee'], 'String');
      if (data.hasOwnProperty('base_fee_per_gas'))
        obj.baseFeePerGas = ApiClient.convertToType(data['base_fee_per_gas'], 'String');
      if (data.hasOwnProperty('from'))
        obj.from = AddressParam.constructFromObject(data['from']);
      if (data.hasOwnProperty('token_transfers'))
        obj.tokenTransfers = ApiClient.convertToType(data['token_transfers'], [TokenTransfer]);
      if (data.hasOwnProperty('tx_types'))
        obj.txTypes = ApiClient.convertToType(data['tx_types'], ['String']);
      if (data.hasOwnProperty('gas_used'))
        obj.gasUsed = ApiClient.convertToType(data['gas_used'], 'String');
      if (data.hasOwnProperty('created_contract'))
        obj.createdContract = AddressParam.constructFromObject(data['created_contract']);
      if (data.hasOwnProperty('position'))
        obj.position = ApiClient.convertToType(data['position'], 'Number');
      if (data.hasOwnProperty('nonce'))
        obj.nonce = ApiClient.convertToType(data['nonce'], 'Number');
      if (data.hasOwnProperty('has_error_in_internal_txs'))
        obj.hasErrorInInternalTxs = ApiClient.convertToType(data['has_error_in_internal_txs'], 'Boolean');
      if (data.hasOwnProperty('actions'))
        obj.actions = ApiClient.convertToType(data['actions'], [TransactionAction]);
      if (data.hasOwnProperty('decoded_input'))
        obj.decodedInput = DecodedInput.constructFromObject(data['decoded_input']);
      if (data.hasOwnProperty('token_transfers_overflow'))
        obj.tokenTransfersOverflow = ApiClient.convertToType(data['token_transfers_overflow'], 'Boolean');
      if (data.hasOwnProperty('raw_input'))
        obj.rawInput = ApiClient.convertToType(data['raw_input'], 'String');
      if (data.hasOwnProperty('value'))
        obj.value = ApiClient.convertToType(data['value'], 'String');
      if (data.hasOwnProperty('max_priority_fee_per_gas'))
        obj.maxPriorityFeePerGas = ApiClient.convertToType(data['max_priority_fee_per_gas'], 'String');
      if (data.hasOwnProperty('revert_reason'))
        obj.revertReason = ApiClient.convertToType(data['revert_reason'], 'String');
      if (data.hasOwnProperty('confirmation_duration'))
        obj.confirmationDuration = ApiClient.convertToType(data['confirmation_duration'], Object);
      if (data.hasOwnProperty('tx_tag'))
        obj.txTag = ApiClient.convertToType(data['tx_tag'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} timestamp
 */
Transaction.prototype.timestamp = undefined;

/**
 * @member {module:model/Fee} fee
 */
Transaction.prototype.fee = undefined;

/**
 * @member {Number} gasLimit
 */
Transaction.prototype.gasLimit = undefined;

/**
 * @member {Number} block
 */
Transaction.prototype.block = undefined;

/**
 * @member {String} status
 */
Transaction.prototype.status = undefined;

/**
 * @member {String} method
 */
Transaction.prototype.method = undefined;

/**
 * @member {Number} confirmations
 */
Transaction.prototype.confirmations = undefined;

/**
 * @member {Number} type
 */
Transaction.prototype.type = undefined;

/**
 * @member {String} exchangeRate
 */
Transaction.prototype.exchangeRate = undefined;

/**
 * @member {module:model/AddressParam} to
 */
Transaction.prototype.to = undefined;

/**
 * @member {String} txBurntFee
 */
Transaction.prototype.txBurntFee = undefined;

/**
 * @member {String} maxFeePerGas
 */
Transaction.prototype.maxFeePerGas = undefined;

/**
 * @member {String} result
 */
Transaction.prototype.result = undefined;

/**
 * @member {String} hash
 */
Transaction.prototype.hash = undefined;

/**
 * @member {String} gasPrice
 */
Transaction.prototype.gasPrice = undefined;

/**
 * @member {String} priorityFee
 */
Transaction.prototype.priorityFee = undefined;

/**
 * @member {String} baseFeePerGas
 */
Transaction.prototype.baseFeePerGas = undefined;

/**
 * @member {module:model/AddressParam} from
 */
Transaction.prototype.from = undefined;

/**
 * @member {Array.<module:model/TokenTransfer>} tokenTransfers
 */
Transaction.prototype.tokenTransfers = undefined;

/**
 * @member {Array.<String>} txTypes
 */
Transaction.prototype.txTypes = undefined;

/**
 * @member {String} gasUsed
 */
Transaction.prototype.gasUsed = undefined;

/**
 * @member {module:model/AddressParam} createdContract
 */
Transaction.prototype.createdContract = undefined;

/**
 * @member {Number} position
 */
Transaction.prototype.position = undefined;

/**
 * @member {Number} nonce
 */
Transaction.prototype.nonce = undefined;

/**
 * @member {Boolean} hasErrorInInternalTxs
 */
Transaction.prototype.hasErrorInInternalTxs = undefined;

/**
 * @member {Array.<module:model/TransactionAction>} actions
 */
Transaction.prototype.actions = undefined;

/**
 * @member {module:model/DecodedInput} decodedInput
 */
Transaction.prototype.decodedInput = undefined;

/**
 * @member {Boolean} tokenTransfersOverflow
 */
Transaction.prototype.tokenTransfersOverflow = undefined;

/**
 * @member {String} rawInput
 */
Transaction.prototype.rawInput = undefined;

/**
 * @member {String} value
 */
Transaction.prototype.value = undefined;

/**
 * @member {String} maxPriorityFeePerGas
 */
Transaction.prototype.maxPriorityFeePerGas = undefined;

/**
 * @member {String} revertReason
 */
Transaction.prototype.revertReason = undefined;

/**
 * @member {Object} confirmationDuration
 */
Transaction.prototype.confirmationDuration = undefined;

/**
 * @member {String} txTag
 */
Transaction.prototype.txTag = undefined;

