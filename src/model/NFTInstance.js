/*
 * BlockScout API
 * API for BlockScout web app
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {AddressParam} from './AddressParam';
import {TokenInfo} from './TokenInfo';

/**
 * The NFTInstance model module.
 * @module model/NFTInstance
 * @version 1.0.0
 */
export class NFTInstance {
  /**
   * Constructs a new <code>NFTInstance</code>.
   * @alias module:model/NFTInstance
   * @class
   * @param isUnique {Boolean} 
   * @param id {String} 
   * @param owner {module:model/AddressParam} 
   * @param token {module:model/TokenInfo} 
   */
  constructor(isUnique, id, owner, token) {
    this.isUnique = isUnique;
    this.id = id;
    this.owner = owner;
    this.token = token;
  }

  /**
   * Constructs a <code>NFTInstance</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NFTInstance} obj Optional instance to populate.
   * @return {module:model/NFTInstance} The populated <code>NFTInstance</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new NFTInstance();
      if (data.hasOwnProperty('is_unique'))
        obj.isUnique = ApiClient.convertToType(data['is_unique'], 'Boolean');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('holder_address_hash'))
        obj.holderAddressHash = ApiClient.convertToType(data['holder_address_hash'], 'String');
      if (data.hasOwnProperty('image_url'))
        obj.imageUrl = ApiClient.convertToType(data['image_url'], 'String');
      if (data.hasOwnProperty('animation_url'))
        obj.animationUrl = ApiClient.convertToType(data['animation_url'], 'String');
      if (data.hasOwnProperty('external_app_url'))
        obj.externalAppUrl = ApiClient.convertToType(data['external_app_url'], 'String');
      if (data.hasOwnProperty('metadata'))
        obj.metadata = ApiClient.convertToType(data['metadata'], Object);
      if (data.hasOwnProperty('owner'))
        obj.owner = AddressParam.constructFromObject(data['owner']);
      if (data.hasOwnProperty('token'))
        obj.token = TokenInfo.constructFromObject(data['token']);
    }
    return obj;
  }
}

/**
 * @member {Boolean} isUnique
 */
NFTInstance.prototype.isUnique = undefined;

/**
 * @member {String} id
 */
NFTInstance.prototype.id = undefined;

/**
 * @member {String} holderAddressHash
 */
NFTInstance.prototype.holderAddressHash = undefined;

/**
 * @member {String} imageUrl
 */
NFTInstance.prototype.imageUrl = undefined;

/**
 * @member {String} animationUrl
 */
NFTInstance.prototype.animationUrl = undefined;

/**
 * @member {String} externalAppUrl
 */
NFTInstance.prototype.externalAppUrl = undefined;

/**
 * @member {Object} metadata
 */
NFTInstance.prototype.metadata = undefined;

/**
 * @member {module:model/AddressParam} owner
 */
NFTInstance.prototype.owner = undefined;

/**
 * @member {module:model/TokenInfo} token
 */
NFTInstance.prototype.token = undefined;

